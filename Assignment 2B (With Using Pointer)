ASSIGNMENT NO:2(Part B-With Using Pointers)
	Title:Represent matrix using two dimensional arrays and perform 		following operations with and without pointers: 
		i. Addition 
		ii. multiplication
		iii. transpose
		iv. Saddle point 

#include<stdio.h>
voidaddmat(int *p,int *q,int *r,int r1,int r2,int c1,int c2);
voidmul(int *p,int *q,int *r,int r1,int r2,int c1,int c2);
void transpose(int *p,int *q,int r1,int c1);
voidsaddlep(int *p,int r1,int c1);
void main()
{
	int a[10][10],b[10][10],c[10][10],i,j,r1,r2,c1,c2,ch;
	int *p,*q,*r;
	p=&a[0][0];
	q=&b[0][0];
	r=&c[0][0];
	printf("\n Enter the no.s of rows and columns of 1st matrix=");
	scanf("%d %d",&r1,&c1);
	printf("\n Enter the no.s of rows and columns of 2nd matrix=");
	scanf("%d %d",&r2,&c2);
	printf("\n Enter the elements of 1st matrix=");
	for(i=0;i<r1;i++)
	{
		for(j=0;j<c1;j++)
		{
		scanf("%d", &a[i][j]);
		}
	}
	printf("\n Enter the elements of 2nd matrix=");
	for(i=0;i<r2;i++)
	{
		for(j=0;j<c2;j++)
		{
		scanf("%d", &b[i][j]);
		}
	}
	printf("\n Matrix A=\n");
	for(i=0;i<r1;i++)
	{
		for(j=0;j<c1;j++)
		{
		printf("%d	", a[i][j]);
		}
		printf("\n");
	}
	printf("\n Matrix B=\n");
	for(i=0;i<r2;i++)
	{
		for(j=0;j<c2;j++)
		{
		printf("%d	", b[i][j]);
		}
		printf("\n");
	}
	do
	{
		printf("\n1.Addition\n2.Multiplication\n3.Transpose\n4.Saddle point");
		printf("\n Enter your choice=");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:addmat(p,q,r,r1,r2,c1,c2);
				break;
			case 2:mul(p,q,r,r1,r2,c1,c2);
				break;
			case 3:transpose(p,q,r1,c1);
				break;
			case 4:saddlep(p,r1,c1);
				break;
			default:printf("\n Invalid choice");
		}
		printf("Do you want to continue?");
	}while(ch!=0);
}
voidaddmat(int *p,int *q,int *r,int r1,int r2,int c1,int c2)
{
	inti,j;
	if(r1==r2 && c1==c2)
	{
		for(i=0;i<r1;i++)
		{
			for(j=0;j<c1;j++)
			{
				  *(r+(i*10)+j)= *(p+(i*10)+j)+*(q+(i*10)+j);	
			}
			
		}
		printf("\n sum of matrix=\n");
		for(i=0;i<r1;i++)
		{
			for(j=0;j<c1;j++)
			{	
			printf("%d	",*(r+(i*10)+j));
			}
			printf("\n");
		}
		
	}
	else
	{
		printf("\n Size of both matrix is not matching");
	}
}
voidmul(int *p,int *q,int *r,int r1,int r2,int c1,int c2)
{
	inti,j,k;
	if(c1==r2)
	{
		for(i=0;i<r1;i++)
		{
			for(j=0;j<c2;j++)
			{
				*(r+(i*10)+j)=0;
			}
		}
	}
		for(i=0;i<r1;i++)
		{
			for(j=0;j<c2;j++)
			{
				for(k=0;k<c1;k++)
				{
					*(r+(i*10)+j)=*(r+(i*10)+j)+*(p+(i*10)+k)**(q+(k*10)+j);
				}
			}
		}
	printf("\n multiplication of matrix=\n");
		for(i=0;i<r1;i++)
		{
			for(j=0;j<c1;j++)
			{	
			printf("%d	",*(r+(i*10)+j));
			}
			printf("\n");
		}
	
}
void transpose(int *p,int *q,int r1,int c1)
{
	int i=0,j=0;
	

		for(i=0;i<r1;i++)
		{
			for(j=0;j<c1;j++)
			{
				*(q+(i*10)+j)=*(p+(j*10)+i);
				
			}
			
		}
		printf("\n Transpose of matrix=\n");
		for(i=0;i<r1;i++)
		{
			for(j=0;j<c1;j++)
			{	
			printf("%d	",*(q+(i*10)+j));
			}
			printf("\n");
		}
}
voidsaddlep(int *p,int r1,int c1)
{
	inti,j,k,min,max,col;
	
	for(i=0;i<r1;i++)
	{
		min=*(p+(i*10)+0);
		for(j=0;j<c1;j++)
		{
			if(*(p+(i*10)+j)<=min)
			{
				min=*(p+(i*10)+j);
				col=j;
			}
		}
	}
	max=*(p+(0*10)+col);
	for(k=0;k<r1;k++)
	{
		if(*(p+(k*10)+col)>=max)
		{
			max=*(p+(k*10)+col);
		}
	}
	if(min==max)
	{
		printf("\nsaddle point is (%d, %d)",i,col+1);
		printf("\nsaddle point is =%d",max);
	}
	else
	{
		printf("No saddle point");
	}
}


